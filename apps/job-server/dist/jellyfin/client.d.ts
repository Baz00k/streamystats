import { Server } from "../db/schema";
import { JellyfinSession } from "./types";
export interface JellyfinConfig {
    baseURL: string;
    apiKey: string;
    timeout?: number;
    rateLimitPerSecond?: number;
    maxRetries?: number;
}
export interface JellyfinUser {
    Id: string;
    Name: string;
    ServerId?: string;
    LastLoginDate?: string;
    LastActivityDate?: string;
    HasPassword: boolean;
    HasConfiguredPassword: boolean;
    HasConfiguredEasyPassword: boolean;
    EnableAutoLogin: boolean;
    IsAdministrator: boolean;
    IsHidden: boolean;
    IsDisabled: boolean;
    EnableUserPreferenceAccess: boolean;
    EnableRemoteControlOfOtherUsers: boolean;
    EnableSharedDeviceControl: boolean;
    EnableRemoteAccess: boolean;
    EnableLiveTvManagement: boolean;
    EnableLiveTvAccess: boolean;
    EnableMediaPlayback: boolean;
    EnableAudioPlaybackTranscoding: boolean;
    EnableVideoPlaybackTranscoding: boolean;
    EnablePlaybackRemuxing: boolean;
    EnableContentDeletion: boolean;
    EnableContentDownloading: boolean;
    EnableSyncTranscoding: boolean;
    EnableMediaConversion: boolean;
    EnableAllDevices: boolean;
    EnableAllChannels: boolean;
    EnableAllFolders: boolean;
    EnablePublicSharing: boolean;
    InvalidLoginAttemptCount: number;
    LoginAttemptsBeforeLockout: number;
    MaxActiveSessions: number;
    RemoteClientBitrateLimit: number;
    AuthenticationProviderId: string;
    PasswordResetProviderId: string;
    SyncPlayAccess: string;
}
export interface JellyfinLibrary {
    Id: string;
    Name: string;
    CollectionType?: string;
    LibraryOptions?: any;
    RefreshProgress?: number;
    RefreshStatus?: string;
    ServerId?: string;
    IsFolder: boolean;
    ParentId?: string;
    Type: string;
    LocationType: string;
    ImageTags?: Record<string, string>;
    BackdropImageTags?: string[];
    ScreenshotImageTags?: string[];
    PrimaryImageAspectRatio?: number;
    Path?: string;
    EnableMediaSourceDisplay?: boolean;
    SortName?: string;
    ForcedSortName?: string;
    MediaType?: string;
}
export interface JellyfinBaseItemDto {
    Id: string;
    Name: string;
    OriginalTitle?: string;
    ServerId?: string;
    ParentId?: string;
    Type: string;
    IsFolder: boolean;
    UserData?: any;
    Video3DFormat?: string;
    PremiereDate?: string;
    CriticRating?: number;
    ProductionYear?: number;
    IndexNumber?: number;
    ParentIndexNumber?: number;
    ProviderIds?: Record<string, string>;
    IsHD?: boolean;
    IsFolder2?: boolean;
    ParentLogoItemId?: string;
    ParentBackdropItemId?: string;
    ParentBackdropImageTags?: string[];
    LocalTrailerCount?: number;
    RemoteTrailerCount?: number;
    SeriesName?: string;
    SeriesId?: string;
    SeasonId?: string;
    SpecialFeatureCount?: number;
    DisplayPreferencesId?: string;
    Status?: string;
    AirTime?: string;
    AirDays?: string[];
    Tags?: string[];
    PrimaryImageAspectRatio?: number;
    ImageTags?: Record<string, string>;
    BackdropImageTags?: string[];
    ScreenshotImageTags?: string[];
    ParentLogoImageTag?: string;
    ParentArtItemId?: string;
    ParentArtImageTag?: string;
    SeriesPrimaryImageTag?: string;
    SeriesThumbImageTag?: string;
    ImageBlurHashes?: Record<string, Record<string, string>>;
    SeriesStudio?: string;
    ParentThumbItemId?: string;
    ParentThumbImageTag?: string;
    ParentPrimaryImageItemId?: string;
    ParentPrimaryImageTag?: string;
    Chapters?: any[];
    LocationType: string;
    IsoType?: string;
    MediaType?: string;
    EndDate?: string;
    LockedFields?: string[];
    TrailerCount?: number;
    MovieCount?: number;
    SeriesCount?: number;
    ProgramCount?: number;
    EpisodeCount?: number;
    SongCount?: number;
    AlbumCount?: number;
    ArtistCount?: number;
    MusicVideoCount?: number;
    LockData?: boolean;
    Width?: number;
    Height?: number;
    CameraMake?: string;
    CameraModel?: string;
    Software?: string;
    ExposureTime?: number;
    FocalLength?: number;
    ImageOrientation?: string;
    Aperture?: number;
    ShutterSpeed?: number;
    Latitude?: number;
    Longitude?: number;
    Altitude?: number;
    IsoSpeedRating?: number;
    SeriesTimerId?: string;
    ProgramId?: string;
    ChannelName?: string;
    ChannelNumber?: string;
    ChannelId?: string;
    TimerId?: string;
    ProgramInfo?: any;
    DateCreated?: string;
    Etag?: string;
    Path?: string;
    EnableMediaSourceDisplay?: boolean;
    Overview?: string;
    Taglines?: string[];
    Genres?: string[];
    CommunityRating?: number;
    CumulativeRunTimeTicks?: number;
    RunTimeTicks?: number;
    PlayAccess?: string;
    AspectRatio?: string;
    Resolution?: string;
    OfficialRating?: string;
    CustomRating?: string;
    ChannelType?: string;
    TargetWidth?: number;
    TargetHeight?: number;
    NormalizationGain?: number;
    DefaultIndex?: number;
    HasSubtitles?: boolean;
    PreferredMetadataLanguage?: string;
    PreferredMetadataCountryCode?: string;
    Container?: string;
    SortName?: string;
    ForcedSortName?: string;
    Video3DFormat2?: string;
    DateLastMediaAdded?: string;
    Album?: string;
    CriticRating2?: number;
    ProductionYear2?: number;
    AirsBeforeSeasonNumber?: number;
    AirsAfterSeasonNumber?: number;
    AirsBeforeEpisodeNumber?: number;
    CanDelete?: boolean;
    CanDownload?: boolean;
    HasLyrics?: boolean;
    HasSubtitles2?: boolean;
    PreferredMetadataLanguage2?: string;
    PreferredMetadataCountryCode2?: string;
    SupportsSync?: boolean;
    Container2?: string;
    SortName2?: string;
    ForcedSortName2?: string;
    ExternalUrls?: any[];
    MediaSources?: any[];
    People?: any[];
    Studios?: any[];
    GenreItems?: any[];
    TagItems?: any[];
    ParentId2?: string;
    RemoteTrailers?: any[];
    ProviderIds2?: Record<string, string>;
    IsFolder3?: boolean;
    ParentId3?: string;
    Type2?: string;
    People2?: any[];
    Studios2?: any[];
    GenreItems2?: any[];
    ParentLogoItemId2?: string;
    ParentBackdropItemId2?: string;
    ParentBackdropImageTags2?: string[];
    LocalTrailerCount2?: number;
    UserData2?: any;
    RecursiveItemCount?: number;
    ChildCount?: number;
    SeriesName2?: string;
    SeriesId2?: string;
    SeasonId2?: string;
    SpecialFeatureCount2?: number;
    DisplayPreferencesId2?: string;
    Status2?: string;
    AirTime2?: string;
    AirDays2?: string[];
    Tags2?: string[];
    PrimaryImageAspectRatio2?: number;
    Artists?: string[];
    ArtistItems?: any[];
    AlbumArtist?: string;
    AlbumArtists?: any[];
    SeasonName?: string;
    MediaStreams?: any[];
    VideoType?: string;
    PartCount?: number;
    MediaSourceCount?: number;
    ImageTags2?: Record<string, string>;
    BackdropImageTags2?: string[];
    ScreenshotImageTags2?: string[];
    ParentLogoImageTag2?: string;
    ParentArtItemId2?: string;
    ParentArtImageTag2?: string;
    SeriesPrimaryImageTag2?: string;
    CollectionType?: string;
    DisplayOrder?: string;
    AlbumId?: string;
    AlbumPrimaryImageTag?: string;
    SeriesThumbImageTag2?: string;
    AlbumArtist2?: string;
    AlbumArtists2?: any[];
    SeasonName2?: string;
    MediaStreams2?: any[];
    VideoType2?: string;
    PartCount2?: number;
    MediaSourceCount2?: number;
}
export interface JellyfinActivity {
    Id: string;
    Name: string;
    ShortOverview?: string;
    Type: string;
    Date: string;
    Severity: string;
    UserId?: string;
    ItemId?: string;
}
export interface ItemsResponse {
    Items: JellyfinBaseItemDto[];
    TotalRecordCount: number;
    StartIndex: number;
}
export declare class JellyfinClient {
    private client;
    private limiter;
    private config;
    constructor(config: JellyfinConfig);
    private makeRequest;
    getUsers(): Promise<JellyfinUser[]>;
    getUser(userId: string): Promise<JellyfinUser>;
    getLibraries(): Promise<JellyfinLibrary[]>;
    getItem(itemId: string): Promise<JellyfinBaseItemDto>;
    getLibraryId(itemId: string): Promise<string>;
    private findLibraryRecursive;
    getRecentlyAddedItems(limit?: number): Promise<JellyfinBaseItemDto[]>;
    getRecentlyAddedItemsByLibrary(libraryId: string, limit?: number): Promise<JellyfinBaseItemDto[]>;
    getItemsPage(libraryId: string, startIndex: number, limit: number, imageTypes?: string[]): Promise<{
        items: JellyfinBaseItemDto[];
        totalCount: number;
    }>;
    getItemsWithImages(libraryId: string, startIndex: number, limit: number, imageTypes?: string[]): Promise<{
        items: JellyfinBaseItemDto[];
        totalCount: number;
    }>;
    getActivities(startIndex: number, limit: number): Promise<JellyfinActivity[]>;
    getInstalledPlugins(): Promise<any[]>;
    getSessions(): Promise<JellyfinSession[]>;
    static fromServer(server: Server): JellyfinClient;
}
//# sourceMappingURL=client.d.ts.map